import java.util.*;
import java.io.*;
public class P7562 {
	
	public static int[] dr = {-2,-1,1,2,2,1,-1,-2};
	public static int[] dc = {1,2,2,1,-1,-2,-2,-1};

	public static void main(String[] args) throws IOException {
		BufferedReader br = new  BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st ;
		int tc =Integer.parseInt(br.readLine());
		
		for(int t=0;t<tc;t++) {
			int N = Integer.parseInt(br.readLine());
			st = new StringTokenizer(br.readLine());
			int startr=Integer.parseInt(st.nextToken());
			int startc=Integer.parseInt(st.nextToken());
			
			
			Queue<int []> queue = new LinkedList<int[]>();
			
			st = new StringTokenizer(br.readLine());
			int endr=Integer.parseInt(st.nextToken());
			int endc=Integer.parseInt(st.nextToken());
			
			
			int day=0;
			queue.add(new int[] {startr,startc});
			boolean[][] visited = new boolean[N][N];
			visited[startr][startc] = true;
			
			while(!queue.isEmpty()) {
				int size =queue.size();
				
				boolean finish = false;
				for(int i=0;i<size; i++) {
					int[] now = queue.poll();
					int r = now[0];
					int c = now[1];
					if(r==endr && c ==endc) {
						finish = true;
						break;
					}
					
					for(int d=0;d<8;d++) {
						int nr = r+dr[d];
						int nc = c+dc[d];
						
						if(nr < 0 || nr>=N || nc<0 || nc>=N)continue;
						if(visited[nr][nc]==true)continue;
						queue.add(new int[] {nr,nc});
						visited[nr][nc]=true;
						
					}
					
				}
				
				
				if(finish)break;
				day++;
			}
			
			System.out.println(day);
			
			
			
		}

	}

}
