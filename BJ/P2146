import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class P2146 {
	
	public static int N;
	public static int[][] map;
	public static List<List<Node>> list;
	public static boolean[][] visited;
	public static int[] dr = {-1,0,1,0};
	public static int[] dc = {0,1,0,-1};
	
	
	public static void main(String[] args) throws  IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		map = new int[N][N];
		StringTokenizer st;
		
		list = new ArrayList<List<Node>>();
		visited = new boolean[N][N];
		
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++) {
				map[i][j]=Integer.parseInt(st.nextToken());
			}
		}
		
		for(int i=0;i<N;i++) {
			for(int j=0;j<N;j++) {
				if(map[i][j]==1 && visited[i][j]==false) {
					list.add(findEdge(i,j));
				}
			}
		}
		
//		System.out.println(list.size());
		
		boolean[] used = new boolean[list.size()];
		
		int MIN =Integer.MAX_VALUE;
		
		for(int i=0;i<list.size();i++) {
			List<Node> now = list.get(i);
			used[i]=true;
			for(int j=0;j<list.size();j++) {
				if(i==j)continue;
				if(used[j]==true)continue;
				
				List<Node> target =list.get(j);
				for(int k=0;k<now.size();k++) {
					for(int q=0;q<target.size();q++) {
						Node a=now.get(k);
						Node n = target.get(q);
						int dist = Math.abs(a.r-n.r)+Math.abs(a.c-n.c)-1;
						
						MIN =Math.min(MIN, dist);
						
						
					}
				}
			}
		}
		
		System.out.println(MIN);

	}

	
	private static List<Node> findEdge(int i, int j) {
		//bfs 하며 모서리를 찾은다음 리스트에 저장 하고 리턴
		List<Node> rt = new ArrayList<>();
		
		Queue<Node> queue = new LinkedList<>();
		queue.add(new Node(i,j));
		visited[i][j]=true;
		
		while(!queue.isEmpty()) {
			Node tmp = queue.poll();
			int cnt=0;
			for(int d =0;d<4;d++) {
				int nr = tmp.r+dr[d];
				int nc = tmp.c+dc[d];
				if(nr<0 || nr>=N || nc<0 || nc>=N)continue;
				if(map[nr][nc]==0)cnt++;
				
				if(visited[nr][nc]==true)continue;
				if(map[nr][nc]==1) {
					queue.add(new Node(nr,nc));
					visited[nr][nc]=true;
				}
				
			}
			if(cnt>0) {  //바다가 보이는 모서리 처리
				rt.add(tmp);
			}
			
		}
		
		return rt;
	}


	public static class Node{
		int r;
		int c;
		
		Node(int r,int c){
			this.r =r;
			this.c = c;
		}
	}

}
