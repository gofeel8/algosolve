import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;


public class Main {
	
	public static boolean[][] map;
	public static boolean[] checked;
	public static boolean[] visited;
	public static int N;

	public static void main(String[] args) throws  IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		int M = Integer.parseInt(br.readLine());
		
		map= new boolean[N+1][N+1];
		StringTokenizer st;
		
		checked = new boolean[N+1];
		visited = new boolean[N+1];
		
		for(int i=1;i<=N;i++) {
			st=new StringTokenizer(br.readLine());
			for(int j=1;j<=N;j++) {
				if(st.nextToken().equals("1")) {
					map[i][j]=true;
				}
			}
		}
		
		st=new StringTokenizer(br.readLine());
		
		int cnt=0;
		int start =-1;
		for(int i=0;i<M;i++) {
			int num = Integer.parseInt(st.nextToken());
			if(checked[num]==false) {
				checked[num]=true;
				cnt++;
			}
			
			if(start==-1) {
				start = num;
			}
		}
		
		
		if(bfs(start,cnt)) {
			System.out.println("YES");
		}else {
			System.out.println("NO");
		}

		
		

	}


	private static boolean bfs(int start, int cnt) {
		Queue<Integer> queue = new LinkedList<>();
		queue.add(start);
		checked[start]=false;
		visited[start]=true;
		cnt--;

		while(!queue.isEmpty()) {
			if(cnt<=0) {
				return true;
			}
			int now = queue.poll();
			
			for(int i=1;i<=N;i++) {
				if(map[now][i]==false)continue;
				if(visited[i]==true)continue;
				
				if(checked[i]==true) {
					checked[i]=false;
					cnt--;
				}
				
				queue.add(i);
				visited[i]=true;
				
				
			}
			
		}
		
		return false;
	}

}
