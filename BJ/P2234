import java.util.*;
import java.io.*;

public class P2234 {
	public static int[][] colorMap;
	public static boolean[][] visited;
	public static int[] dr = {-1,0,1,0};
	public static int[] dc = {0,1,0,-1};
	public static int N;
	public static int M;
	public static int[] cant = {8,1,2,4};
	public static int[][] map;
	public static List<int[]> list;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		
		map = new int[M][N];
		
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++) {
				map[i][j]=Integer.parseInt(st.nextToken());
			}
		}
		
		
		visited = new boolean[M][N];
		
		colorMap = new int[M][N];
		int idx=0;
		int MAX= Integer.MIN_VALUE;
		list = new ArrayList<>();
		for(int i=0;i<M;i++) {
			for(int j=0;j<N;j++) {
				if(visited[i][j]==false) {
					int num = bfs(i,j,idx++);
//					System.out.println(num);
					list.add(new int[] {i,j,num});
					MAX = Math.max(MAX, num);
				}
			}
		}
		System.out.println(list.size());
		System.out.println(MAX);
		
		
//		for(int i=0;i<list.size();i++) {
//			for(int j=i+1;j<list.size();j++) {
//				if(close(i,j)) {
//					sum = Math.max(sum, list.get(i)[2]+list.get(j)[2]);
//				}
//			}
//		}
		

		List<Set<Integer>> adj = new ArrayList<>();
		visited = new boolean[M][N];
		
		for(int i=0;i<M;i++) {
			for(int j=0;j<N;j++) {
				if(visited[i][j]==false) {
					adj.add(findADJ(i,j));
				}
			}
		}
		
		int sum = Integer.MIN_VALUE;
		
		for(int i=0;i<adj.size();i++) {
			Set<Integer> now =adj.get(i);
			for(int a : now) {
//				System.out.println(a);
				sum = Math.max(list.get(i)[2]+list.get(a)[2],sum);
			}
		}
		
		System.out.println(sum);
		
		
	}




	private static Set<Integer> findADJ(int i, int j) {

		
		int nowColor = colorMap[i][j];
		Set<Integer> rt = new HashSet<>();
		

		Queue<int[]> queue = new LinkedList<int[]>();
		queue.add(new int[] {i,j});
		visited[i][j]=true;
		
		while(!queue.isEmpty()) {
			int[] now  = queue.poll();
			
			for(int d=0;d<4;d++) {
				int nr = now[0]+dr[d];
				int nc = now[1]+dc[d];
				if(nr<0 || nr>=M || nc<0 || nc>=N)continue;
				if(visited[nr][nc]==true)continue;
				if(colorMap[nr][nc]==nowColor) {
					queue.add(new int[] {nr,nc});
					visited[nr][nc]=true;
				}else {
					rt.add(colorMap[nr][nc]);
				}
				
			}
		}
		
		
		
		return rt;
	}




	private static int bfs(int r, int c, int color) {
		int size =0;
		
		Queue<int[]> queue = new LinkedList<int[]>();
		queue.add(new int[] {r,c});
		colorMap[r][c]=color;
		visited[r][c]=true;
		size++;
		
		while(!queue.isEmpty()) {
			int[] now  = queue.poll();
			
			for(int d=0;d<4;d++) {
				int nr = now[0]+dr[d];
				int nc = now[1]+dc[d];
				if(nr<0 || nr>=M || nc<0 || nc>=N)continue;
				if(visited[nr][nc]==true)continue;
				if((cant[d] & map[nr][nc]) != 0)continue;
				queue.add(new int[] {nr,nc});
				visited[nr][nc]=true;
				colorMap[nr][nc]=color;
				size++;
			}
		}
		
		
		return size;
	}

}
