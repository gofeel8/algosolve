import java.util.*;
import java.io.*;

public class P7576 {
	public static int[][] map;
	public static int total;
	public static int good;
	public static boolean[][] visited;
	public static int[] dr = {-1,0,1,0};
	public static int[] dc = {0,1,0,-1};
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		total = 0;
		good=0;
		map = new int[M][N];
		visited = new boolean[M][N];
		
		Queue<int[]> queue = new LinkedList<int[]>();
		
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++) {
				int num = Integer.parseInt(st.nextToken());
				map[i][j]=num;
				if(num !=-1) {
					total++;
				}
				
				if(num ==1) {
					good++;
					queue.add(new int[] {i,j});
					visited[i][j]=true;
				}
			}
		}
		
		if(total==good) {
			System.out.println(0);
			return;
		}
		
		int day=0;
		while(!queue.isEmpty()) {
			int size = queue.size();
			day++;
			for(int i=0;i<size;i++) {
				int[] now = queue.poll();
				
				for(int d=0;d<4;d++) {
					int nr = now[0]+dr[d];
					int nc = now[1]+dc[d];
					if(nr<0 || nr>=M || nc<0 || nc>=N)continue;
					if(visited[nr][nc]==true) continue;
					if(map[nr][nc]==0) {
						queue.add(new int[] {nr,nc});
						visited[nr][nc]=true;
						//1로 바꿔 줄까? ㄴㄴ 굳이
						good++;
					}
				}
			}
			
			if(good == total)break;
		}
		
		
		System.out.println(good==total ? day : -1);
		
		
		
		
	}


}
