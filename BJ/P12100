import java.io.*;
import java.util.*;

public class P12100 {
	public static int N;
	public static int result;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		int[][] map  =new int[N][N];
		StringTokenizer st ;
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++) {
				map[i][j]=Integer.parseInt(st.nextToken());
			}
		}
		
		
		for(int i=0;i<4;i++) {
			int[][] copy=copy(map);
			move(0,copy,i);
		}
		
		System.out.println(result);
	}
	
	
	public static void move(int idx,int[][] map,int dir) {
		if(idx ==5) {
			int max =0;
			for(int i=0;i<N;i++) {
				for(int j=0;j<N;j++) {
					if(map[i][j]>max)max=map[i][j];
				}
			}
			if(result<max) {
				result=max;
			}
			return;
		}
		
		switch (dir) {
		case 0:
			for(int i=0;i<N;i++) {
				Stack<Integer> stack = new Stack<>();
				boolean used = false;
				for(int j=0;j<N;j++) {
					int num = map[j][i];
					map[j][i]=0;
					if(stack.size()!=0 &&  num == stack.peek() && used ==false) {
						num = stack.pop()+num;
						used = true;
					}else if(num !=0) {
						used = false;
					}
					if(num != 0 ) {
						stack.push(num);
					}
				}
				
				int size = stack.size();
				for(int j=size;j>0;j--) {
					map[j-1][i]=stack.pop();
				}
				
			}
			break;
		case 1:   // 우측 
			
			for(int i=0;i<N;i++) {
				Stack<Integer> stack = new Stack<>();
				boolean used = false;
				for(int j=N-1;j>=0;j--) {
					int num = map[i][j];
					map[i][j]=0;
					if(stack.size()!=0 &&  num == stack.peek() && used ==false) {
						num = stack.pop()+num;
						used = true;
					}else if(num !=0) {
						used = false;
					}
					if(num != 0 ) {
						stack.push(num);
					}
				}

				int size = stack.size();
				for(int j=size;j>0;j--) {
					map[i][N-1-(j-1)]=stack.pop();
				}
				
			}
			break;
		case 2: // 아래 
			for(int i=0;i<N;i++) {
				Stack<Integer> stack = new Stack<>();
				boolean used = false;
				for(int j=N-1;j>=0;j--) {
					int num = map[j][i];
					map[j][i]=0;
					if(stack.size()!=0 &&  num == stack.peek()&& used ==false) {
						num = stack.pop()+num;
						used = true;
					}else if(num !=0) {
						used = false;
					}
					if(num != 0 ) {
						stack.push(num);
					}
				}

				int size = stack.size();
				for(int j=size;j>0;j--) {
					map[N-1-(j-1)][i]=stack.pop();
				}
				
			}
			break;
		case 3: //왼쪽
			for(int i=0;i<N;i++) {
				Stack<Integer> stack = new Stack<>();
				boolean used = false;
				for(int j=0;j<N;j++) {
					int num = map[i][j];
					map[i][j]=0;
					if(stack.size()!=0 &&  num == stack.peek()&& used ==false) {
						num = stack.pop()+num;
						used = true;
					}else if(num !=0) {
						used = false;
					}
					if(num != 0 ) {
						stack.push(num);
					}
				}

				int size = stack.size();
				for(int j=size;j>0;j--) {
					map[i][j-1]=stack.pop();
				}
				
			}
			break;

		default:
			break;
		}
		
	
		

		for(int i=0;i<4;i++) {
			int[][] copy=copy(map);
			move(idx+1,copy,i);
		}
		
	}
	
	public static int[][] copy(int[][] map){
		int[][] rt = new int[N][N];
		for(int i=0;i<N;i++) {
			for(int j=0;j<N;j++) {
				rt[i][j]=map[i][j];
			}
		}
		
		return rt;
	}
	
//	public static void rotate90(int[][] map) {
//		int[][] tmp = new int[N][N];
//		for(int i=0;i<N;i++) {
//			for(int j=0;j<N;j++) {
//				tmp[i][j]=map[j][N-1-i];
//			}
//		}
//		
//		
//		for(int i=0;i<N;i++) {
//			map[i]=tmp[i];
//		}
//	}

}
