import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int[][] map;
	static boolean[][] visited;
	private static int sr;
	private static int gr;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		sr = Integer.parseInt(st.nextToken());
		gr = Integer.parseInt(st.nextToken());
		map = new int[sr][gr];
		for(int i=0;i<sr;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<gr;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		int result =0;
		int clear=0;
		while(true) {
			int temp=bfs();
			if(temp!=0) {
				result++;
				clear = temp;
			}else {
				break;
			}
		}
		System.out.println(result);
		System.out.println(clear);

	}

	private static int bfs() {
		visited= new boolean[sr][gr];
		Queue<int[]> queue = new LinkedList<>();
		queue.add(new int[] {0,0});
		visited[0][0]=true;
		int clear =0;
		while(!queue.isEmpty()) {
			int[] now = queue.poll();
			for(int i=0;i<4;i++) {
				int nr = now[0]+dr[i];
				int nc = now[1]+dc[i];
				if(nr<0 || nr>=sr || nc<0 || nc>=gr)continue;
				if(visited[nr][nc])continue;
				if(map[nr][nc]==1) {
					map[nr][nc]=0;
					clear++;
					visited[nr][nc]=true;
				}else if(map[nr][nc]==0) {
					queue.add(new int[] {nr,nc});
					visited[nr][nc]=true;
				}
			}
		}
		return clear;
	}

}
